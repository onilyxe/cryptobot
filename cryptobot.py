import matplotlib.pyplot as plt
import cryptocompare
import requests
import datetime
import aiogram
import asyncio
import os
import re

from aiogram.client.bot import DefaultBotProperties
from aiogram import Bot, Dispatcher, types
from pycoingecko import CoinGeckoAPI
from aiogram.types import BotCommand
from aiogram.filters import Command
from collections import defaultdict

# –ó–∞–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –±–æ—Ç–∞ —ñ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è–º parse_mode —á–µ—Ä–µ–∑ DefaultBotProperties
TOKEN = '0000000000:0000000000000000000000000000000000'
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='Markdown'))

# –°—Ç–≤–æ—Ä—é—î–º–æ Router –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
router = aiogram.Router()

# –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä CoinGeckoAPI
cg = CoinGeckoAPI()

# –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –º–∞–ø–ø—ñ–Ω–≥—É —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤
crypto_list = cg.get_coins_list()
symbol_to_ids = defaultdict(list)
for coin in crypto_list:
    symbol_to_ids[coin['symbol'].lower()].append(coin['id'])


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@router.message(Command('start'))
async def send_start_message(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤—ñ—Ç. –Ø –≤–º—ñ—é –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —Ç–∞ —ñ–Ω—à–µ. –ù–∞–ø–∏—à–∏ /help, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –º–Ω–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help
@router.message(Command('help'))
async def send_help_message(message: types.Message):
    await message.reply(
        "‚öôÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/help ‚Äî —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "/p `[amount]` `[crypto]` `[fiat]` ‚Äî —Ü—ñ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏\n"
        "/h `[crypto]` `[repiod]` ‚Äî —ñ—Å—Ç–æ—Ä—ñ—è —Ü—ñ–Ω–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ (7, 30, 60, 90, 365 –∞–±–æ '—Ä—ñ–∫')\n"
        "/i `[crypto]` ‚Äî —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
        "/fg ‚Äî —ñ–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ\n"
        "\n–£ –∫–æ–º–∞–Ω–¥—ñ /p –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –≤—Å—ñ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–Ω—è"
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /fg
@router.message(Command('fg'))
async def get_fear_and_greed_index(message: types.Message):
    try:
        response = requests.get('https://api.alternative.me/fng/?limit=1')
        if response.status_code == 200:
            data = response.json()
            value = data['data'][0]['value']
            value_classification = data['data'][0]['value_classification']
            timestamp = data['data'][0]['timestamp']
            readable_date = datetime.datetime.fromtimestamp(int(timestamp)).strftime('%d.%m.%Y')

            message_text = (
                f"{value_classification} - *{value}*/100\n\n"
                f"üöÄ *–Ü–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —ñ –∂–∞–¥–Ω–æ—Å—Ç—ñ*"
                f"\n‚è∞ –û–Ω–æ–≤–ª–µ–Ω–æ: {readable_date}"
            )

            await message.reply(message_text)
        else:
            await message.reply("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /p
@router.message(Command('p'))
async def get_crypto_price(message: types.Message):
    args = message.text.split()

    symbols = {
        "USD": "$", 
        "EUR": "‚Ç¨", 
        "UAH": "‚Ç¥"
    }

    try:
        if len(args) == 1:
            crypto_currency = "BTC"
            fiat_currency = "USD"
            amount = 1
        elif len(args) == 2:
            crypto_currency = args[1].upper()
            fiat_currency = "USD"
            amount = 1
        elif len(args) == 3:
            try:
                amount = float(args[1])
                crypto_currency = args[2].upper()
                fiat_currency = "USD"
            except ValueError:
                crypto_currency = args[1].upper()
                fiat_currency = args[2].upper()
                amount = 1
        elif len(args) == 4:
            amount = float(args[1])
            crypto_currency = args[2].upper()
            fiat_currency = args[3].upper()
        else:
            await message.reply("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /p [amount] [crypto] [fiat]")
            return

        price = cryptocompare.get_price(crypto_currency, currency=fiat_currency, full=False)

        if not price:
            await message.reply("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
            return

        currency_symbol = symbols.get(fiat_currency, "")
        price_value = price[crypto_currency][fiat_currency] * amount
        formatted_price = f"{currency_symbol}{price_value:,.2f}"
        await message.reply(f"{amount} {crypto_currency} –¥–æ {fiat_currency}\n=*{formatted_price}*")
    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /h
@router.message(Command('h'))
async def get_crypto_history(message: types.Message):
    try:
        args = message.text.split()
        crypto_currency = args[1].upper() if len(args) > 1 else "BTC"

        valid_periods = {
            '7': 7,
            '30': 30,
            '60': 60,
            '90': 90,
            '365': 365,
            'year': 365,
            '—Ä—ñ–∫': 365
        }

        if len(args) > 2:
            period_arg = args[2].lower()
            period = valid_periods.get(period_arg, 365)
        else:
            period = 365

        limit = period - 1

        current_timestamp = int(datetime.datetime.now().timestamp())

        history_data = cryptocompare.get_historical_price_day(
            crypto_currency,
            currency="USD",
            limit=limit,
            toTs=current_timestamp
        )

        if not history_data:
            await message.reply("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
            return

        dates = [data['time'] for data in history_data]
        prices = [data['close'] for data in history_data]

        readable_dates = [datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d') for ts in dates]

        plt.figure(figsize=(10, 6))
        plt.plot(readable_dates, prices, label=f"{crypto_currency} Price (USD)")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–¶—ñ–Ω–∞ –≤ USD")
        plt.title(f"{crypto_currency} ‚Äî –Ü—Å—Ç–æ—Ä—ñ—è —Ü—ñ–Ω–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {period} –¥–Ω—ñ–≤")
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.grid(True)

        image_path = f"{crypto_currency}_history.png"
        plt.savefig(image_path)
        plt.close()

        photo = types.FSInputFile(image_path)
        caption = f"–ì—Ä–∞—Ñ—ñ–∫ {crypto_currency} –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {period} –¥–Ω—ñ–≤"
        await message.reply_photo(photo=photo, caption=caption)

        if os.path.exists(image_path):
            os.remove(image_path)

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /i
@router.message(Command('i'))
async def get_crypto_info(message: types.Message):
    try:
        args = message.text.split()
        user_input = args[1].lower() if len(args) > 1 else 'btc'

        coin_ids = symbol_to_ids.get(user_input)
        if not coin_ids:
            await message.reply("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
            return

        market_data = cg.get_coins_markets(vs_currency='usd', ids=coin_ids)

        if not market_data:
            await message.reply("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
            return

        coin = max(market_data, key=lambda x: x.get('market_cap', 0))

        name = coin.get('name', 'N/A')
        symbol = coin.get('symbol', 'N/A').upper()
        current_price = coin.get('current_price', 'N/A')
        market_cap = coin.get('market_cap', 'N/A')
        total_volume = coin.get('total_volume', 'N/A')

        def format_number(value):
            if isinstance(value, (int, float)):
                return f"{value:,.2f}"
            return value

        current_price = format_number(current_price)
        market_cap = format_number(market_cap)
        total_volume = format_number(total_volume)

        coin_id = coin.get('id')
        coin_details = cg.get_coin_by_id(coin_id)
        description = coin_details.get('description', {}).get('en', '')

        description = re.sub('<.*?>', '', description)

        paragraphs = description.split('\n\n')
        first_paragraph = next((p for p in paragraphs if p.strip()), '')
        description = first_paragraph.strip()

        if len(description) > 500:
            description = description[:500].rsplit(' ', 1)[0] + '...'

        message_text = (
            f"*{name} ({symbol})*\n\n"
            f"üí∞ *–¶—ñ–Ω–∞*: ${current_price}\n"
            f"üíπ *–†–∏–Ω–∫–æ–≤–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è*: ${market_cap}\n"
            f"üîÑ *–û–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤ –∑–∞ 24—á*: ${total_volume}\n\n"
            f"*–û–ø–∏—Å*:\n{description}"
        )

        await message.reply(message_text)

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp = Dispatcher()
    dp.include_router(router)

    commands = [
    BotCommand(command="/p", description="- [amount] [crypto] [fiat] - —Ü—ñ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏"),
    BotCommand(command="/h", description="- [crypto] - —ñ—Å—Ç–æ—Ä—ñ—è —Ü—ñ–Ω–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏"),
    BotCommand(command="/i", description="- [crypto] - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"),
    BotCommand(command="/fg", description="- —ñ–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ")]

    await bot.set_my_commands(commands)

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
